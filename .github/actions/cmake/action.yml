name: Setup CMake
description: "Invoke CMake and generate build files"
inputs:
  qt_version:
    description: "Specify Qt version to use"
    required: true
  qt_arch:
    description: "Specify Qt version to use"
    default: "gcc_64"
  use_qt6:
    description: "Specify whether we're using Qt 5 or Qt 6"
    required: true
  modules:
    description: "Specify which modules should be installed"
    required: true
  additional_cmake_args:
    description: "Additional args to pass to CMake"
    default: ""

runs:
  using: "composite"
  steps:
    # Linux deps
    - name: Install/cache clazy, ninja, openldap, doctest libfuse, and Qt's dependencies
      if: runner.os != 'Windows'
      uses: awalsh128/cache-apt-pkgs-action@v1.3.0
      with:
        packages: ninja-build libgl1-mesa-dev libpulse-dev libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-util1 libxcb-xinerama0 libxkbcommon-x11-0 libxcb-cursor-dev clazy libfuse-dev libgstreamer-gl1.0-0 libgstreamer-plugins-base1.0-0
        version: 1.0

    # Windows deps
    - name: Install windows deps
      if: runner.os == 'Windows'
      run: |
        vcpkg install doctest:x64-mingw-dynamic trompeloeil:x64-mingw-dynamic
        echo cmake_extra_args="'-DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake' '-DMINGW=ON' '-G MinGW Makefiles'" >> "$GITHUB_ENV"
      shell: bash

    # Qt
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        cache: true
        version: ${{ inputs.qt_version }}
        arch: ${{ inputs.qt_arch }}
        install-deps: false
        modules: ${{ inputs.modules }}
    
    #- name: Setup Ninja
    #  uses: ashutoshvarma/setup-ninja@master
    #  with:
    #    # ninja version to download. Default: 1.10.0
    #    version: 1.10.0
    
    - name: Configure CMake
      run: |
        # Enable these when all warnings are fixed :^)
        # CFLAGS="-Werror ${CFLAGS}" \
        # CXXFLAGS="-Werror ${CXXFLAGS}" \
        # -G Ninja \
        cmake \
        -S '${{github.workspace}}' \
        -B '${{github.workspace}}/build' \
        -DQF_BUILD_QML_PLUGINS=ON \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_TESTING=OFF \
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
        -DUSE_QT6=${{ inputs.use_qt6 }} \
        ${{ env.cmake_extra_args }} \
        ${{ inputs.additional_cmake_args }}
      shell: bash
